'use client';

import { useState } from 'react';
import {
  Box,
  Card,
  Grid,
  Stack,
  Slider,
  Button,
  Container,
  TextField,
  Typography,
  FormControl,
  RadioGroup,
  Radio,
  FormControlLabel,
  InputAdornment,
  MenuItem,
} from '@mui/material';

import Iconify from 'src/components/iconify';
import { useResponsive } from 'src/hooks/use-responsive';

import {
  WindowType,
  WindowShape,
  WindowStyle,
  WindowMaterial,
  GlassType,
  WindowCustomization,
} from '../types/window-types';

// ----------------------------------------------------------------------

export default function WindowCustomizer() {
  const mdUp = useResponsive('up', 'md');

  const [windowCustomization, setWindowCustomization] = useState<WindowCustomization>({
    type: WindowType.NEW_CONSTRUCTION,
    shape: WindowShape.RECTANGULAR,
    style: WindowStyle.CASEMENT,
    material: WindowMaterial.VINYL,
    dimensions: {
      width: 36,
      height: 48,
      unit: 'inches',
    },
    glassType: GlassType.DOUBLE_PANE,
    color: '#FFFFFF',
    quantity: 1,
    additionalFeatures: {
      grids: false,
      screens: true,
      energyEfficient: true,
      soundProofing: false,
    },
  });

  const [topShapeHeight, setTopShapeHeight] = useState<number>(20);

  const handleTopShapeHeightChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setTopShapeHeight(Number(event.target.value));
  };

  const [windowCustomization1, setWindowCustomization1] = useState<WindowCustomization>({
    type: WindowType.NEW_CONSTRUCTION,
    shape: WindowShape.RECTANGULAR,
    style: WindowStyle.CASEMENT,
    material: WindowMaterial.VINYL,
    dimensions: {
      width: 36,
      height: 48,
      unit: 'inches',
    },
    glassType: GlassType.DOUBLE_PANE,
    color: '#FFFFFF',
    quantity: 1,
    additionalFeatures: {
      grids: false,
      screens: true,
      energyEfficient: true,
      soundProofing: false,
    },
  });

  const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWindowCustomization({
      ...windowCustomization,
      type: event.target.value as WindowType,
    });
  };

  const handleChangeShape = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWindowCustomization({
      ...windowCustomization,
      shape: event.target.value as WindowShape,
    });
  };

  const handleChangeStyle = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWindowCustomization({
      ...windowCustomization,
      style: event.target.value as WindowStyle,
    });
  };

  const handleChangeMaterial = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWindowCustomization({
      ...windowCustomization,
      material: event.target.value as WindowMaterial,
    });
  };

  const handleChangeGlassType = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWindowCustomization({
      ...windowCustomization,
      glassType: event.target.value as GlassType,
    });
  };

  const handleChangeWidth = (
    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    isSecondWindow: boolean = false
  ) => {
    if (isSecondWindow) {
      setWindowCustomization1({
        ...windowCustomization1,
        dimensions: {
          ...windowCustomization1.dimensions,
          width: Number(event.target.value),
        },
      });
    } else {
      setWindowCustomization({
        ...windowCustomization,
        dimensions: {
          ...windowCustomization.dimensions,
          width: Number(event.target.value),
        },
      });
    }
  };

  const handleChangeHeight = (
    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    isSecondWindow: boolean = false
  ) => {
    if (isSecondWindow) {
      setWindowCustomization1({
        ...windowCustomization1,
        dimensions: {
          ...windowCustomization1.dimensions,
          height: Number(event.target.value),
        },
      });
    } else {
      setWindowCustomization({
        ...windowCustomization,
        dimensions: {
          ...windowCustomization.dimensions,
          height: Number(event.target.value),
        },
      });
    }
  };

  const handleChangeColor = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWindowCustomization({
      ...windowCustomization,
      color: event.target.value,
    });
  };

  // Color options
  const colorOptions = [
    { value: '#FFFFFF', label: 'Цагаан', displayColor: '#FFFFFF' },
    { value: '#000000', label: 'Хар', displayColor: '#000000' },
    { value: '#D2B48C', label: 'Шаргал', displayColor: '#D2B48C' },
  ];

  const handleChangeQuantity = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWindowCustomization({
      ...windowCustomization,
      quantity: Number(event.target.value),
    });
  };

  const handleChangeFeature = (
    feature: keyof NonNullable<WindowCustomization['additionalFeatures']>
  ) => {
    setWindowCustomization({
      ...windowCustomization,
      additionalFeatures: {
        ...windowCustomization.additionalFeatures,
        [feature]: !windowCustomization.additionalFeatures?.[feature],
      },
    });
  };

  // Calculate estimated price based on selections
  const calculatePrice = () => {
    let basePrice = 150;

    // Material factors
    switch (windowCustomization.material) {
      case WindowMaterial.VINYL:
        basePrice += 100;
        break;
      case WindowMaterial.WOOD:
        basePrice += 250;
        break;
      case WindowMaterial.ALUMINUM:
        basePrice += 150;
        break;
      case WindowMaterial.FIBERGLASS:
        basePrice += 300;
        break;
      default:
        break;
    }

    // Glass type factors
    switch (windowCustomization.glassType) {
      case GlassType.SINGLE_PANE:
        basePrice += 50;
        break;
      case GlassType.DOUBLE_PANE:
        basePrice += 150;
        break;
      case GlassType.TRIPLE_PANE:
        basePrice += 250;
        break;
      case GlassType.LOW_E:
        basePrice += 200;
        break;
      case GlassType.TEMPERED:
        basePrice += 180;
        break;
      case GlassType.FROSTED:
        basePrice += 170;
        break;
      default:
        break;
    }

    // Size factor (per square foot)
    const sqFt =
      (windowCustomization.dimensions.width * windowCustomization.dimensions.height) / 144;
    basePrice += sqFt * 15;

    // Additional features
    if (windowCustomization.additionalFeatures?.grids) basePrice += 50;
    if (windowCustomization.additionalFeatures?.screens) basePrice += 30;
    if (windowCustomization.additionalFeatures?.energyEfficient) basePrice += 100;
    if (windowCustomization.additionalFeatures?.soundProofing) basePrice += 120;

    return basePrice * windowCustomization.quantity;
  };

  const estimatedPrice = calculatePrice();

  return (
    <Container maxWidth="lg" sx={{ my: 8 }}>
      <Typography variant="h3" sx={{ mb: 5 }}>
        Цонхны Загварчлагч
      </Typography>

      <Grid container spacing={4}>
        <Grid item xs={12} md={7}>
          <Card sx={{ p: 3 }}>
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom>
                Цонхны Төрөл
              </Typography>
              <FormControl>
                <RadioGroup row value={windowCustomization.type} onChange={handleChangeType}>
                  <FormControlLabel
                    value={WindowType.NEW_CONSTRUCTION}
                    control={<Radio />}
                    label="Шинэ Барилгын Цонх"
                  />
                  <FormControlLabel
                    value={WindowType.REPLACEMENT}
                    control={<Radio />}
                    label="Сольж Суулгах Цонх"
                  />
                </RadioGroup>
              </FormControl>
            </Box>
            <Box
              sx={{
                mb: 5,
                height: 320,
                bgcolor: 'grey.200',
                borderRadius: 1,
                position: 'relative',
              }}
            >
              {/* Preview area with two windows directly next to each other */}
              <Box
                sx={{
                  position: 'relative',
                  height: '100%',
                  width: '100%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
              >
                {/* Combined structure with top shape */}
                <Box sx={{ position: 'relative', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                  {/* Top shape */}
                  <Box sx={{ position: 'relative' }}>
                    <Box
                      sx={{
                        width: `${(windowCustomization.dimensions.width + windowCustomization1.dimensions.width) / 3}px`,
                        height: `${topShapeHeight / 3}px`,
                        bgcolor: 'grey.300',
                        border: '2px solid',
                        borderColor: 'grey.500',
                        borderRadius: '4px 4px 0 0',
                        mb: 0.5,
                      }}
                    />
                    <Typography variant="caption" sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', fontSize: '0.6rem' }}>
                      {topShapeHeight} cm
                    </Typography>
                  </Box>
                  
                  {/* Combined windows */}
                  <Box sx={{ display: 'flex', flexDirection: 'row' }}>
                    {/* First window */}
                    <Box sx={{ position: 'relative' }}>
                      <Box
                        sx={{
                          width: `${windowCustomization.dimensions.width / 3}px`,
                          height: `${windowCustomization.dimensions.height / 3}px`,
                          bgcolor: windowCustomization.color,
                          border: '2px solid',
                          // borderColor: 'grey.400',
                          borderRight: 0, // Remove right border to connect with second window
                          borderRadius:
                            windowCustomization.shape === WindowShape.RECTANGULAR
                              ? '4px 0 0 4px' // Round only left corners
                              : windowCustomization.shape === WindowShape.ARCHED
                              ? '20px 0 0 4px' // Arch on left side only
                              : windowCustomization.shape === WindowShape.CIRCULAR
                              ? '50% 0 0 50%' // Half circle on left side
                              : '4px 0 0 4px',
                        }}
                      />
                      <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
                        <Typography variant="caption" sx={{ fontSize: '0.6rem', color: 'common.white', textShadow: '0px 0px 3px rgba(0,0,0,1)', fontWeight: 'bold', mb: 0.5 }}>
                          {windowCustomization.dimensions.width} cm
                        </Typography>
                        <Typography variant="caption" sx={{ fontSize: '0.6rem', color: 'common.white', textShadow: '0px 0px 3px rgba(0,0,0,1)', fontWeight: 'bold' }}>
                          {windowCustomization.dimensions.height} cm
                        </Typography>
                      </Box>
                    </Box>

                    {/* Second window */}
                    <Box sx={{ position: 'relative' }}>
                      <Box
                        sx={{
                          width: `${windowCustomization1.dimensions.width / 3}px`,
                          height: `${windowCustomization.dimensions.height / 3}px`,
                          bgcolor: windowCustomization.color,
                          border: '5px solid',
                          borderColor: 'black',
                          // borderLeft: 0, // Remove left border to connect with first window
                          borderRight: 0,
                          borderTop: 0,
                          borderBottom: 0,
                          borderRadius:
                            windowCustomization.shape === WindowShape.RECTANGULAR
                              ? '0 4px 4px 0' // Round only right corners
                              : windowCustomization.shape === WindowShape.ARCHED
                              ? '0 20px 4px 0' // Arch on right side only
                              : windowCustomization.shape === WindowShape.CIRCULAR
                              ? '0 50% 50% 0' // Half circle on right side
                              : '0 4px 4px 0',
                        }}
                      />
                      <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
                        <Typography variant="caption" sx={{ fontSize: '0.6rem', color: 'common.white', textShadow: '0px 0px 3px rgba(0,0,0,1)', fontWeight: 'bold', mb: 0.5 }}>
                          {windowCustomization1.dimensions.width} cm
                        </Typography>
                        <Typography variant="caption" sx={{ fontSize: '0.6rem', color: 'common.white', textShadow: '0px 0px 3px rgba(0,0,0,1)', fontWeight: 'bold' }}>
                          {windowCustomization1.dimensions.height} cm
                        </Typography>
                      </Box>
                    </Box>
                  </Box>
                </Box>

                {/* Combined dimensions labels */}
                <Stack spacing={0.5} sx={{ position: 'absolute', bottom: 10, textAlign: 'center' }}>
                  <Typography variant="caption">
                    Нийт өргөн:{' '}
                    {windowCustomization.dimensions.width + windowCustomization1.dimensions.width}{' '}
                    cm
                  </Typography>
                  <Typography variant="caption">
                    Өндөр:{' '}
                    {Math.max(
                      windowCustomization.dimensions.height,
                      windowCustomization1.dimensions.height
                    )}{' '}
                    cm
                  </Typography>
                </Stack>
              </Box>
            </Box>

            <Typography variant="subtitle1" sx={{ mb: 2 }}>
              Цонхны Хэмжээ
            </Typography>

            <Typography variant="subtitle1" sx={{ mt: 3, mb: 2 }}>
              1-р Цонхны Хэмжээс
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  fullWidth
                  label="Өргөн"
                  type="number"
                  value={windowCustomization.dimensions.width}
                  onChange={(e) => handleChangeWidth(e, false)}
                  InputProps={{
                    endAdornment: <InputAdornment position="end">cm</InputAdornment>,
                  }}
                />
              </Grid>
              <Grid item xs={6}>
                <TextField
                  fullWidth
                  label="Өндөр"
                  type="number"
                  value={windowCustomization.dimensions.height}
                  onChange={(e) => handleChangeHeight(e, false)}
                  InputProps={{
                    endAdornment: <InputAdornment position="end">cm</InputAdornment>,
                  }}
                />
              </Grid>
            </Grid>

            <Typography variant="subtitle1" sx={{ mt: 3, mb: 2 }}>
              2-р Цонхны Хэмжээс
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  fullWidth
                  label="Өргөн"
                  type="number"
                  value={windowCustomization1.dimensions.width}
                  onChange={(e) => handleChangeWidth(e, true)}
                  InputProps={{
                    endAdornment: <InputAdornment position="end">cm</InputAdornment>,
                  }}
                />
              </Grid>
              <Grid item xs={6}>
                <TextField
                  fullWidth
                  label="Өндөр"
                  type="number"
                  value={windowCustomization1.dimensions.height}
                  onChange={(e) => handleChangeHeight(e, true)}
                  InputProps={{
                    endAdornment: <InputAdornment position="end">cm</InputAdornment>,
                  }}
                />
              </Grid>
            </Grid>
            
            <Typography variant="subtitle1" sx={{ mt: 3, mb: 2 }}>
              Дээд Хэсгийн Хэмжээс
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Өндөр"
                  type="number"
                  value={topShapeHeight}
                  onChange={handleTopShapeHeightChange}
                  InputProps={{
                    endAdornment: <InputAdornment position="end">cm</InputAdornment>,
                  }}
                />
              </Grid>
            </Grid>
          </Card>
        </Grid>

        <Grid item xs={12} md={5}>
          <Card sx={{ p: 3 }}>
            <Typography variant="h5" sx={{ mb: 3 }}>
              Цонхны Сонголтууд
            </Typography>

            <Stack spacing={3}>
              <div>
                <Typography variant="subtitle1" gutterBottom>
                  Цонхны Хэлбэр
                </Typography>
                <FormControl>
                  <RadioGroup row value={windowCustomization.shape} onChange={handleChangeShape}>
                    {Object.values(WindowShape).map((shape) => (
                      <FormControlLabel
                        key={shape}
                        value={shape}
                        control={<Radio />}
                        label={
                          shape === WindowShape.RECTANGULAR
                            ? 'Тэгш өнцөгт'
                            : shape === WindowShape.ARCHED
                            ? 'Нуман'
                            : shape === WindowShape.CIRCULAR
                            ? 'Дугуй'
                            : shape === WindowShape.CUSTOM
                            ? 'Захиалгат'
                            : ''
                        }
                      />
                    ))}
                  </RadioGroup>
                </FormControl>
              </div>

              <div>
                <Typography variant="subtitle1" gutterBottom>
                  Цонхны Загвар
                </Typography>
                <TextField
                  select
                  fullWidth
                  value={windowCustomization.style}
                  onChange={(e) =>
                    setWindowCustomization({
                      ...windowCustomization,
                      style: e.target.value as WindowStyle,
                    })
                  }
                >
                  {Object.values(WindowStyle).map((style) => (
                    <MenuItem key={style} value={style}>
                      {style === WindowStyle.CASEMENT
                        ? 'Эргэдэг Цонх'
                        : style === WindowStyle.DOUBLE_HUNG
                        ? 'Хос Дүүжин Цонх'
                        : style === WindowStyle.SLIDING
                        ? 'Гүйдэг Цонх'
                        : style === WindowStyle.FIXED
                        ? 'Тогтмол Цонх'
                        : style === WindowStyle.BAY
                        ? 'Булан Цонх'
                        : style === WindowStyle.BOW
                        ? 'Нумын Цонх'
                        : style === WindowStyle.AWNING
                        ? 'Саравч Цонх'
                        : ''}
                    </MenuItem>
                  ))}
                </TextField>
              </div>

              <div>
                <Typography variant="subtitle1" gutterBottom>
                  Материал
                </Typography>
                <TextField
                  select
                  fullWidth
                  value={windowCustomization.material}
                  onChange={(e) =>
                    setWindowCustomization({
                      ...windowCustomization,
                      material: e.target.value as WindowMaterial,
                    })
                  }
                >
                  {Object.values(WindowMaterial).map((material) => (
                    <MenuItem key={material} value={material}>
                      {material === WindowMaterial.VINYL
                        ? 'Хуванцар (Винил)'
                        : material === WindowMaterial.WOOD
                        ? 'Мод'
                        : material === WindowMaterial.ALUMINUM
                        ? 'Хөнгөн цагаан'
                        : material === WindowMaterial.FIBERGLASS
                        ? 'Шилон мөр'
                        : ''}
                    </MenuItem>
                  ))}
                </TextField>
              </div>

              <div>
                <Typography variant="subtitle1" gutterBottom>
                  Шилний Төрөл
                </Typography>
                <TextField
                  select
                  fullWidth
                  value={windowCustomization.glassType}
                  onChange={(e) =>
                    setWindowCustomization({
                      ...windowCustomization,
                      glassType: e.target.value as GlassType,
                    })
                  }
                >
                  {Object.values(GlassType).map((glass) => (
                    <MenuItem key={glass} value={glass}>
                      {glass === GlassType.SINGLE_PANE
                        ? 'Нэг Давхарга Шил'
                        : glass === GlassType.DOUBLE_PANE
                        ? 'Хос Давхарга Шил'
                        : glass === GlassType.TRIPLE_PANE
                        ? 'Гурван Давхарга Шил'
                        : glass === GlassType.LOW_E
                        ? 'Бага Цацаргалт Шил'
                        : glass === GlassType.TEMPERED
                        ? 'Хатуу Шил'
                        : glass === GlassType.FROSTED
                        ? 'Цантсан Шил'
                        : ''}
                    </MenuItem>
                  ))}
                </TextField>
              </div>

              <div>
                <Typography variant="subtitle1" gutterBottom>
                  Өнгө
                </Typography>
                <FormControl>
                  <RadioGroup row value={windowCustomization.color} onChange={handleChangeColor}>
                    {colorOptions.map((color) => (
                      <FormControlLabel
                        key={color.value}
                        value={color.value}
                        control={<Radio />}
                        label={
                          <Stack direction="row" spacing={1} alignItems="center">
                            <Box
                              sx={{
                                width: 20,
                                height: 20,
                                bgcolor: color.displayColor,
                                borderRadius: '50%',
                                border: '1px solid',
                                borderColor: 'divider',
                              }}
                            />
                            <Typography variant="body2">{color.label}</Typography>
                          </Stack>
                        }
                      />
                    ))}
                  </RadioGroup>
                </FormControl>
              </div>

              <div>
                <Typography variant="subtitle1" gutterBottom>
                  Тоо Хэмжээ
                </Typography>
                <TextField
                  fullWidth
                  type="number"
                  InputProps={{ inputProps: { min: 1 } }}
                  value={windowCustomization.quantity}
                  onChange={handleChangeQuantity}
                />
              </div>

              <div>
                <Typography variant="subtitle1" gutterBottom>
                  Нэмэлт Үйлчилгээнүүд
                </Typography>
                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <FormControlLabel
                      control={
                        <Radio
                          checked={!!windowCustomization.additionalFeatures?.grids}
                          onChange={() => handleChangeFeature('grids')}
                        />
                      }
                      label="Торлол"
                    />
                  </Grid>
                  <Grid item xs={6}>
                    <FormControlLabel
                      control={
                        <Radio
                          checked={!!windowCustomization.additionalFeatures?.screens}
                          onChange={() => handleChangeFeature('screens')}
                        />
                      }
                      label="Тор"
                    />
                  </Grid>
                  <Grid item xs={6}>
                    <FormControlLabel
                      control={
                        <Radio
                          checked={!!windowCustomization.additionalFeatures?.energyEfficient}
                          onChange={() => handleChangeFeature('energyEfficient')}
                        />
                      }
                      label="Эрчим Хүч Хэмнэлттэй"
                    />
                  </Grid>
                  <Grid item xs={6}>
                    <FormControlLabel
                      control={
                        <Radio
                          checked={!!windowCustomization.additionalFeatures?.soundProofing}
                          onChange={() => handleChangeFeature('soundProofing')}
                        />
                      }
                      label="Дуу Тусгаарлагч"
                    />
                  </Grid>
                </Grid>
              </div>

              <Stack spacing={2}>
                <Typography variant="h5">Ойролцоо Үнэ: ${estimatedPrice.toFixed(2)}</Typography>

                <Stack direction="row" spacing={2}>
                  <Button
                    fullWidth
                    size="large"
                    variant="contained"
                    startIcon={<Iconify icon="carbon:shopping-cart-plus" />}
                    onClick={() => {
                      // Here you would add the window to the cart using your cart context or API call
                      // For example:
                      // addToCart({
                      //   ...windowCustomization,
                      //   price: calculatePrice(),
                      //   id: generateId(),
                      //   name: `${windowCustomization.material} ${windowCustomization.style} Window`
                      // });
                      alert('Цонх амжилттай сагсанд нэмэгдлээ!'); // Window successfully added to cart!
                    }}
                  >
                    Сагсанд Нэмэх
                  </Button>

                  <Button
                    fullWidth
                    size="large"
                    variant="contained"
                    color="primary"
                    onClick={() => {
                      // Here you would add the window to cart and redirect to checkout
                      // For example:
                      // addToCart({
                      //   ...windowCustomization,
                      //   price: calculatePrice(),
                      //   id: generateId(),
                      // });
                      // router.push(paths.eCommerce.checkout);
                      alert('Цонх сагсанд нэмэгдэж төлбөр хийх хуудас руу шилжиж байна...'); // Window added to cart and redirecting to payment page...
                    }}
                  >
                    Одоо Авах
                  </Button>
                </Stack>
              </Stack>
            </Stack>
          </Card>
        </Grid>
      </Grid>
    </Container>
  );
}
